/* -*- mode: c -*- */

quote(C, "\n\
#include <limits.h>\n\
#include \"ap_coeff.h\"\n\
#include \"apron_caml.h\"\n\
\n\
#define Scalar AP_COEFF_SCALAR\n\
#define Interval AP_COEFF_INTERVAL\n\
")

import "scalar.idl";
import "interval.idl";

struct ap_coeff_t {
  int discr; /* discriminant for coefficient */
  [switch_is(discr)] union {
    case Scalar: [ref]ap_scalar_t* scalar;
      /* cst (normal linear expression) */
    case Interval: [ref]struct ap_interval_t* interval;
      /* interval (quasi-linear expression) */
  } val;
};
quote(MLMLI,"(** Coefficients (either scalars or intervals) *)")

quote(MLI,"\n\
val is_scalar : t -> bool\n\
val is_interval : t -> bool\n\
val cmp : t -> t -> int\n\
  (** Non Total Comparison:\n\
     - If the 2 coefficients are both scalars, corresp. to Scalar.cmp\n\
     - If the 2 coefficients are both intervals, corresp. to Interval.cmp\n\
     - otherwise, -3 if the first is a scalar, 3 otherwise\n\
  *)\n\
val equal : t -> t -> bool\n\
  (** Equality test *)\n\
val is_zero : t -> bool\n\
  (** Is the coefficient equal to scalar 0 or interval [0,0] ? *)\n\
val neg : t -> t\n\
  (** Negation *)\n\
val reduce : t -> t\n\
  (** Convert interval to scalar if possible *)\n\
val print : Format.formatter -> t -> unit\n\
  (** Printing *)\n\
")

quote(ML,"\n\
let is_scalar c = match c with Scalar _ -> true | _ -> false\n\
let is_interval c = match c with Interval _ -> true | _ -> false\n\
let cmp c1 c2 = match (c1,c2) with\n\
| (Scalar s1, Scalar s2) -> Scalar.cmp s1 s2\n\
| (Interval i1, Interval i2) -> Interval.cmp i1 i2\n\
| (Scalar _, _) -> (-3)\n\
| _ -> 3\n\
let equal c1 c2 = match (c1,c2) with\n\
| (Scalar s1, Scalar s2) -> Scalar.equal s1 s2\n\
| (Interval i1, Interval i2) -> Interval.equal i1 i2\n\
| _ -> false\n\
let is_zero c = match c with\n\
| Scalar s -> (Scalar.sgn s)=0\n\
| Interval i -> Interval.is_zero i\n\
let neg c = match c with\n\
| Scalar s -> Scalar (Scalar.neg s)\n\
| Interval i -> Interval (Interval.neg i)\n\
let reduce c = match c with\n\
| Scalar _ -> c\n\
| Interval i ->\n\
    if Scalar.equal i.Interval.inf i.Interval.sup\n\
    then Scalar i.Interval.inf\n\
    else c\n\
let print fmt c = match c with\n\
| Scalar s -> Scalar.print fmt s\n\
| Interval i -> Interval.print fmt i\n\
")
