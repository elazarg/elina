/* -*- mode: c -*- */

/* This file is part of the APRON Library, released under LGPL license.
   Please read the COPYING file packaged in the distribution  */

quote(MLI,"(** Linear constraints of level 0 *)")

quote(C, "\n\
#include <limits.h>\n\
#include \"ap_lincons0.h\"\n\
#include \"apron_caml.h\"\n\
\n\
#define EQ AP_CONS_EQ\n\
#define SUPEQ AP_CONS_SUPEQ\n\
#define SUP AP_CONS_SUP\n\
")

import "scalar.idl";
import "interval.idl";
import "coeff.idl";
import "dim.idl";
import "linexpr0.idl";

enum constyp {
  EQ,    /* equality constraint */
  SUPEQ, /* >= constraint */
  SUP    /* > constraint */
};
struct ap_lincons0_t {
  [mlname(mutable_linexpr0)] ap_linexpr0_ptr linexpr0;
  [mlname(mutable_typ)] enum constyp constyp;
};

struct ap_lincons0_array_t {
  [size_is(size)] struct ap_lincons0_t* p;
  int size;
};

quote(MLI,"\n\
(** Make a linear constraint. Modifying later the linear expression\n\
  modifies correspondingly the linear constraint and conversely *)\n\
val make : Linexpr0.t -> typ -> t\n\
\n\
(** Copy a linear expression (deep copy) *)\n\
val copy : t -> t\n\
\n\
(** Convert a constraint type to a string ([=],[>=], or [>]) *)\n\
val string_of_typ : typ -> string\n\
\n\
(** Print a constraint *)\n\
val print : (Dim.t -> string) -> Format.formatter -> t -> unit\n\
")

quote(ML,"\n\
let string_of_typ = function\n\
| EQ -> \"=\"\n\
| SUPEQ -> \">=\"\n\
| SUP -> \">\"\n\
\n\
let print assoc fmt cons = \n\
  Linexpr0.print assoc fmt cons.linexpr0;\n\
  Format.fprintf fmt \"%s0\" (string_of_typ cons.typ);\n\
  ()\n\
let make expr typ = {\n\
linexpr0 = expr; typ = typ;\n\
}\n\
let copy cons = {\n\
linexpr0 = Linexpr0.copy cons.linexpr0; typ = cons.typ;\n\
}\n\
")
