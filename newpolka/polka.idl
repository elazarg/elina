/* -*- mode: c -*- */

/* This file is part of the APRON Library, released under LGPL license.  Please
   read the COPYING file packaged in the distribution */

quote(C,"#include \"pk_internal.h\"")
quote(C,"#include \"pkeq.h\"")
quote(C,"#include \"ap_manager.h\"")
quote(C,"#include \"apron_caml.h\"")

quote(C,"typedef struct pk_internal_t* internal_ptr;")

import "manager.idl";

typedef [abstract] struct pk_internal_t* internal_ptr;

quote(MLMLI,"(** Convex Polyhedra and Linear Equalities abstract domains *)")

quote(MLMLI,"\n\
type loose\n\
type strict\n\
  (** Two flavors for convex polyhedra: loose or strict.\n\n\
      Loose polyhedra cannot have strict inequality constraints like [x>0].\n\
      They are algorithmically more efficient\n\
      (less generators, simpler normalization).\n\n\
      Convex polyhedra are defined by the conjunction of a set of linear\n\
      constraints of the form [a_0*x_0 + ... + a_n*x_n + b >= 0] or\n\
      [a_0*x_0 + ... + a_n*x_n + b > 0]\n\
      where [a_0, ..., a_n, b, c] are constants and [x_0, ..., x_n] variables.\n\n\
  *)\n\n\
type equalities\n\
  (** Linear equalities.\n\n\
      Linear equalities are conjunctions of linear\n\
      equalities of the form [a_0*x_0 + ... + a_n*x_n + b = 0].\n\
  *)\n\n\
type 'a t\n\
(** Type of convex polyhedra/linear equalities, where ['a] is [loose], [strict] or [equalities].\n\
\n\
    Abstract values which are convex polyhedra have the type\n\
    [(loose t) Apron.Abstract0.t] or [(loose t) Apron.Abstract1.t] or\n\
    [(strict t) Apron.Abstract0.t] or [(strict t) Apron.Abstract1.t].\n\n\
    Abstract values which are conjunction of linear equalities have the type\n\
    [(equalities t) Apron.Abstract0.t] or [(equalities t) Apron.Abstract1.t].\n\n\
    Managers allocated by NewPolka have the type ['a t Apron.Manager.t].\n\
*)\n\
")

quote(MLI,"\n\n(** Create a NewPolka manager for loose convex polyhedra. *)")
ap_manager_ptr pk_manager_alloc_loose()
quote(call,"_res = pk_manager_alloc(false);");

quote(MLI,"\n\n(** Create a NewPolka manager for strict convex polyhedra. *)")
ap_manager_ptr pk_manager_alloc_strict()
quote(call,"_res = pk_manager_alloc(true);");

quote(MLI,"\n\n(** Create a NewPolka manager for conjunctions of linear equalities. *)")
ap_manager_ptr pk_manager_alloc_equalities()
quote(call,"_res = pkeq_manager_alloc();");

quote(MLI,"\n\n(** Get the internal submanager of a NewPolka manager. *)")
internal_ptr manager_get_internal(ap_manager_ptr man)
  quote(call,"_res = (internal_ptr)man->internal;");

quote(MLI,"\n\n(** Various options. See the C documentation *)\n\n")
void pk_set_max_coeff_size(internal_ptr pk, unsigned int size);
void pk_set_approximate_max_coeff_size(internal_ptr pk, unsigned int size);
int pk_get_max_coeff_size(internal_ptr pk);
int pk_get_approximate_max_coeff_size(internal_ptr pk);
