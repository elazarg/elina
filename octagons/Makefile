# Makefile
#
# APRON Library / Octagonal Domain
#
# Copyright (C) Antoine Mine' 2006

# This file is part of the APRON Library, released under LGPL license.
# Please read the COPYING file packaged in the distribution.

include ../Makefile.config

PREFIX = $(OCT_PREFIX)

# C include and lib directories
INCDIR = $(PREFIX)/include
LIBDIR = $(PREFIX)/lib
BINDIR = $(PREFIX)/bin

SRCDIR = $(shell pwd)

#---------------------------------------
# Programs
#---------------------------------------

# Library creation
SHARED = gcc -shared

#---------------------------------------
# Flags
#---------------------------------------

# Use ICFLAGS to specify machine-independent compilation flags.
ICFLAGS = \
-I../newpolka \
-I../mlgmpidl \
-I$(MPFR_PREFIX)/include \
-I$(GMP_PREFIX)/include \
-I../apron \
-I../mlapronidl \
-I../num \
-I$(CAML_PREFIX)/lib/ocaml -I$(CAMLIDL_PREFIX)/lib/ocaml 

# Caml
OCAMLINC = -I ../mlgmpidl -I ../mlapronidl

#---------------------------------------
# Files
#---------------------------------------

CCSOURCES = oct_hmat.c oct_print.c oct_transfer.c oct_closure.c oct_nary.c \
	    oct_representation.c oct_predicate.c oct_resize.c setround.c

CCINC = oct_internal.h oct_fun.h setround.h

# trigers a whole recompilation
#DEPS = $(APRON_PREFIX)/include/ap_abstract0.h

#---------------------------------------
# Rules
#---------------------------------------

root:
	@echo
	@echo "Please choose a target from:"
	@echo
	@echo " Zi Zl Zg Qi Ql Qg Fd Fl : single C library"
	@echo " all                     : all C libraries"
	@echo " ml                      : OCaml library"
	@echo " mlZi mlZl ...           : OCaml toplevel & byte-code"
	@echo " allml                   : everything"
	@echo " install                 : to install what has been compiled"
	@echo " clean                   : remove objects"
	@echo " distclean               : clean & uninstall"
	@echo " mostyleclean            : remove objects & autogenerated"
	@echo " rebuild                 : rebuild autogenerated "
	@echo

all: Zi Zl Zg Qi Ql Qg Fd Fl
allml: allZi allZl allZg allQi allQl allQg allFd allFl

allZi: Zi mlZi
allZl: Zl mlZl
allZg: Zg mlZg
allQi: Qi mlQi
allQl: Ql mlQl
allQg: Qg mlQg
allFd: Fd mlFd
allFl: Fl mlFl

Zi: liboctZi.a octtestZi
Zl: liboctZl.a octtestZl
Zg: liboctZg.a octtestZg
Qi: liboctQi.a octtestQi
Ql: liboctQl.a octtestQl
Qg: liboctQg.a octtestQg
Fd: liboctFd.a octtestFd
Fl: liboctFl.a octtestFl

clean:
	/bin/rm -f *.[ao] *.so octtest*
	/bin/rm -f *.?.tex *.log *.aux *.bbl *.blg *.toc *.dvi *.ps *.pstex*
	/bin/rm -fr *.cm[ioax] *.cmxa
	/bin/rm -fr octtop* octrun* tmp
	/bin/rm -fr *~ \#*\#

mostlyclean: clean
	/bin/rm -fr oct_caml.c oct.ml oct.mli 

install:
	$(INSTALLd) $(INCDIR) $(INCDIR)/oct $(LIBDIR) $(BINDIR)
	$(INSTALL) oct.h $(INCDIR)
	$(INSTALL) $(CCINC) $(INCDIR)/oct
	for i in liboct??.* liboct_caml.* oct.idl; do \
		if test -f $$i; then $(INSTALL) $$i $(LIBDIR); fi; \
	done
	for i in octtest?? octtop?? octrun??; do \
		if test -f $$i; then $(INSTALL) $$i $(BINDIR); fi; \
	done
	for i in oct.mli oct.cmi oct.cma oct.cmxa oct.a; do \
		if test -f $$i; then $(INSTALL) $$i $(LIBDIR); fi; \
	done

uninstall:
	/bin/rm -fr $(INCDIR)/oct
	/bin/rm -f $(BINDIR)/octtest?? $(BINDIR)/octtop?? $(BINDIR)/octrun??
	/bin/rm -f $(LIBDIR)/liboct??.* $(LIBDIR)/liboct??_caml.*
	/bin/rm -f $(LIBDIR)/oct.mli $(LIBDIR)/oct.cmi $(LIBDIR)/oct.idl $(LIBDIR)/oct??.cma $(LIBDIR)/oct??.cmxa $(LIBDIR)/oct??.a
	/bin/rm -f Makefile.depend

distclean: uninstall
	/bin/rm -f Makefile.depend

dist: Makefile COPYING README oct_doc.html sedscript_caml $(CCSOURCES) $(CCINC) oct.h oct_test.c oct.idl
	(cd ..; tar zcvf octagons.tgz $(^:%=octagons/%))

#---------------------------------------
# IMPLICIT RULES AND DEPENDENCIES
#---------------------------------------

.SUFFIXES: .tex .c .h .a .o .so

#-----------------------------------
# C part
#-----------------------------------

liboct%.a: $(subst .c,%.o,$(CCSOURCES))
	$(AR) rcs $@ $^
	$(RANLIB) $@

liboct%.so: $(subst .c,%.o,$(CCSOURCES))
	$(SHARED) -o $@ $^

octtest%: liboct%.a oct_test%.o
	$(CC) $(CFLAGS_DEBUG) $(ICFLAGS) -o $@ oct_test$*.o \
	-L. -loct$* \
	-L../newpolka -lpolkag_debug \
	-L../apron -lapron \
	-L$(MPFR_PREFIX)/lib -lmpfr \
	-L$(GMP_PREFIX)/lib -lgmp \
	-lm

%_caml.o: %_caml.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -c -o $@ $<

%Zi.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DNUM_LONGINT -c -o $@ $<
%Zl.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DNUM_LONGLONGINT -c -o $@ $<
%Zg.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DNUM_MPZ -I$(GMP_PREFIX)/include -c -o $@ $<

%Qi.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DNUM_LONGRAT -c -o $@ $<
%Ql.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DNUM_LONGLONGRAT -c -o $@ $<
%Qg.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DNUM_MPQ -I$(GMP_PREFIX)/include -c -o $@ $<

%Fd.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DNUM_DOUBLE -c -o $@ $<
%Fl.o: %.c $(CCINC) $(DEPS)
	$(CC) $(CFLAGS) $(ICFLAGS) -DNUM_LONGDOUBLE -c -o $@ $<

# TODO: mpfr ?

.PRECIOUS: liboct%.a liboct%.so %Zi.o %Zl.o %Zg.o %Qi.o %Ql.o %Qg.o %Fd.o %Fl.o


#-----------------------------------
# Caml part
#-----------------------------------

.INTERMEDIATE: mlZi

ml: oct.mli oct.cmi oct.cma oct.cmxa
mlZi: ml octtopZi octrunZi
mlZl: ml octtopZl octrunZl
mlZg: ml octtopZg octrunZg
mlQi: ml octtopQi octrunQi
mlQl: ml octtopQl octrunQl
mlQg: ml octtopQg octrunQg
mlFd: ml octtopFd octrunFd
mlFl: ml octtopFl octrunFl

octtop%: oct.cma liboct_caml.a liboct%.a
	$(OCAMLMKTOP) $(OCAMLFLAGS) $(OCAMLINC) -o $@ -custom bigarray.cma gmp.cma apron.cma oct.cma -ccopt -L. -cclib -loct$* -ccopt -L../mlgmpidl -ccopt -L../mlapronidl -ccopt -L../apron

octrun%: oct.cma liboct_caml.a
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -o $@ -make-runtime bigarray.cma gmp.cma apron.cma oct.cma -ccopt -L. -cclib -loct$* -ccopt -L../mlgmpidl -ccopt -L../mlapronidl -ccopt -L../apron

oct.cma: oct.cmi oct.cmo liboct_caml.a
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -custom -a -o $@ \
	oct.cmo \
	-ccopt "-L$(OCT_PREFIX)/lib" -cclib "-loct_caml"

oct.cmxa oct.a: oct.cmi oct.cmx liboct_caml.a
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLINC) -a -o $@ \
	oct.cmx \
	-ccopt "-L$(OCT_PREFIX)/lib" -cclib "-loct_caml"
	$(RANLIB) oct.a

liboct_caml.a: oct_caml.o
	$(AR) rcs $@ $^
	$(RANLIB) $@

liboct_caml.so: oct_caml.o
	$(SHARED) -o $@ $^

rebuild: oct.idl
	mkdir -p tmp
	cp ../mlapronidl/*.idl tmp
	cp oct.idl tmp/
	cd tmp && $(CAMLIDL) -no-include -nocpp -I . oct.idl
	cp tmp/oct_stubs.c oct_caml.c
	sed -f sedscript_caml tmp/oct.ml >oct.ml
	sed -f sedscript_caml tmp/oct.mli >oct.mli

.PRECIOUS: %_caml.c %.ml %.mli %.cmi liboct%_caml.a liboct%_caml.so oct.cmx oct.cmo

#---------------------------------------
# ML generic rules
#---------------------------------------

%.cmi: %.mli  $(DEPS)
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -c $<

%.cmo: %.ml %.cmi  $(DEPS)
	$(OCAMLC) $(OCAMLFLAGS) $(OCAMLINC) -c $<

%.cmx: %.ml %.cmi  $(DEPS)
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLINC) -c $<



#-----------------------------------
# DEPENDENCIES
#-----------------------------------
